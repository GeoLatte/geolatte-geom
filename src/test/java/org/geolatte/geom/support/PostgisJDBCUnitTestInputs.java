/*
 * This file is part of the GeoLatte project.
 *
 *     GeoLatte is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     GeoLatte is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with GeoLatte.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (C) 2010 - 2012 and Ownership of code is shared by:
 * Qmino bvba - Romeinsestraat 18 - 3001 Heverlee  (http://www.qmino.com)
 * Geovise bvba - Generaal Eisenhowerlei 9 - 2140 Antwerpen (http://www.geovise.com)
 */

package org.geolatte.geom.support;

import org.geolatte.geom.*;
import org.geolatte.geom.crs.CrsId;

/**
 * @author Karel Maesen, Geovise BVBA
 *         creation-date: 10/13/12
 */

public class PostgisJDBCUnitTestInputs extends CodecTestBase {

    public PostgisJDBCUnitTestInputs() {

        addCase(1,
                "POINT(10 10)",
                "010100000000000000000024400000000000002440",
                Points.create2D(10, 10));

        addCase(2,
                "POINT(10 10 0)",
                "0101000080000000000000244000000000000024400000000000000000",
                Points.create3D(10, 10, 0));

        addCase(3,
                "POINTM(10 10 20)",
                "0101000040000000000000244000000000000024400000000000003440",
                Points.create2DM(10, 10, 20));

        addCase(4,
                "POINT(10 10 20 30)",
                "01010000C00000000000002440000000000000244000000000000034400000000000003E40",
                Points.create3DM(10, 10, 20, 30));

        addCase(5, //-- broken format
                "MULTIPOINT(11 12, 20 20)",
                "010400000002000000010100000000000000000026400000000000002840010100000000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create2D(11, 12), Points.create2D(20, 20)}),
                false);

        addCase(6,
                "MULTIPOINT(11 12 13, 20 20 20)",
                "0104000080020000000101000080000000000000264000000000000028400000000000002A400101000080000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create3D(11, 12, 13), Points.create3D(20, 20, 20)}),
                false);

        addCase(7,
                "MULTIPOINTM(11 12 13, 20 20 20)",
                "0104000040020000000101000040000000000000264000000000000028400000000000002A400101000040000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create2DM(11, 12, 13), Points.create2DM(20, 20, 20)}),
                false);

        addCase(8,
                "MULTIPOINT(11 12 13 14,20 20 20 20)",
                "01040000C00200000001010000C0000000000000264000000000000028400000000000002A400000000000002C4001010000C00000000000003440000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create3DM(11, 12, 13, 14), Points.create3DM(20, 20, 20, 20)}),
                false);

        addCase(9,
                "MULTIPOINT((11 12),(20 20))",
                "010400000002000000010100000000000000000026400000000000002840010100000000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create2D(11, 12), Points.create2D(20, 20)}));

        addCase(10,
                "MULTIPOINT((11 12 13),(20 20 20))",
                "0104000080020000000101000080000000000000264000000000000028400000000000002A400101000080000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create3D(11, 12, 13), Points.create3D(20, 20, 20)}));

        addCase(11,
                "MULTIPOINTM((11 12 13),(20 20 20))",
                "0104000040020000000101000040000000000000264000000000000028400000000000002A400101000040000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create2DM(11, 12, 13), Points.create2DM(20, 20, 20)}));

        addCase(12,
                "MULTIPOINT((11 12 13 14),(20 20 20 20))",
                "01040000C00200000001010000C0000000000000264000000000000028400000000000002A400000000000002C4001010000C00000000000003440000000000000344000000000000034400000000000003440",
                new MultiPoint(new Point[]{Points.create3DM(11, 12, 13, 14), Points.create3DM(20, 20, 20, 20)}));

        addCase(13,
                "LINESTRING(10 10,20 20,50 50,34 34)",
                "01020000000400000000000000000024400000000000002440000000000000344000000000000034400000000000004940000000000000494000000000000041400000000000004140",
                new LineString(PointSequenceBuilders.fixedSized(4, DimensionalFlag.d2D, CrsId.UNDEFINED).add(10, 10).add(20, 20).add(50, 50).add(34, 34).toPointSequence()));

        LineString line3D = new LineString(PointSequenceBuilders.fixedSized(4, DimensionalFlag.d3D, CrsId.UNDEFINED)
                .add(10, 10, 20).add(20, 20, 20).add(50, 50, 50).add(34, 34, 34).toPointSequence());
        addCase(14,
                "LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34)",
                "010200008004000000000000000000244000000000000024400000000000003440000000000000344000000000000034400000000000003440000000000000494000000000000049400000000000004940000000000000414000000000000041400000000000004140",
                line3D);

        addCase(15,
                "LINESTRINGM(10 10 20,20 20 20,50 50 50,34 34 34)",
                "010200004004000000000000000000244000000000000024400000000000003440000000000000344000000000000034400000000000003440000000000000494000000000000049400000000000004940000000000000414000000000000041400000000000004140",
                new LineString(PointSequenceBuilders.fixedSized(4, DimensionalFlag.d2DM, CrsId.UNDEFINED)
                        .add(10, 10, 20).add(20, 20, 20).add(50, 50, 50).add(34, 34, 34).toPointSequence()));

        addCase(16,
                "LINESTRING(10 10 20 20,20 20 20 20,50 50 50 50,34 34 34 50)",
                "01020000C0040000000000000000002440000000000000244000000000000034400000000000003440000000000000344000000000000034400000000000003440000000000000344000000000000049400000000000004940000000000000494000000000000049400000000000004140000000000000414000000000000041400000000000004940",
                new LineString(PointSequenceBuilders.fixedSized(4, DimensionalFlag.d3DM, CrsId.UNDEFINED)
                        .add(10, 10, 20, 20).add(20, 20, 20, 20).add(50, 50, 50, 50).add(34, 34, 34, 50).toPointSequence()));

        Polygon polygon2D = new Polygon(new LinearRing[]{
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d2D, CrsId.UNDEFINED)
                        .add(10, 10).add(20, 10).add(20, 20).add(20, 10).add(10, 10)
                        .toPointSequence()),
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d2D, CrsId.UNDEFINED)
                        .add(5, 5).add(5, 6).add(6, 6).add(6, 5).add(5, 5).toPointSequence())
        });
        addCase(17,
                "POLYGON((10 10,20 10,20 20,20 10,10 10),(5 5,5 6,6 6,6 5,5 5))",
                "010300000002000000050000000000000000002440000000000000244000000000000034400000000000002440000000000000344000000000000034400000000000003440000000000000244000000000000024400000000000002440050000000000000000001440000000000000144000000000000014400000000000001840000000000000184000000000000018400000000000001840000000000000144000000000000014400000000000001440",
                polygon2D
        );

        Polygon polygon3D = new Polygon(new LinearRing[]{
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                        .add(10, 10, 0).add(20, 10, 0).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0)
                        .toPointSequence()),
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                        .add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
        });

        addCase(18,
                "POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))",
                "0103000080020000000500000000000000000024400000000000002440000000000000000000000000000034400000000000002440000000000000000000000000000034400000000000003440000000000000000000000000000034400000000000002440000000000000000000000000000024400000000000002440000000000000000005000000000000000000144000000000000014400000000000000000000000000000144000000000000018400000000000000000000000000000184000000000000018400000000000000000000000000000184000000000000014400000000000000000000000000000144000000000000014400000000000000000",
                polygon3D);

        Polygon polygon2DM = new Polygon(new LinearRing[]{
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d2DM, CrsId.UNDEFINED)
                        .add(10, 10, 0).add(20, 10, 0).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0)
                        .toPointSequence()),
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d2DM, CrsId.UNDEFINED)
                        .add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
        });

        addCase(19,
                "POLYGONM((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))",

                polygon2DM);

        Polygon polygon3DM = new Polygon(new LinearRing[]{
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d3DM, CrsId.UNDEFINED)
                        .add(10, 10, 0, 7).add(20, 10, 0, 7).add(20, 20, 0, 7).add(20, 10, 0, 7).add(10, 10, 0, 7)
                        .toPointSequence()),
                new LinearRing(PointSequenceBuilders.variableSized(DimensionalFlag.d3DM, CrsId.UNDEFINED)
                        .add(5, 5, 0, 7).add(5, 6, 0, 7).add(6, 6, 0, 7).add(6, 5, 0, 7).add(5, 5, 0, 7).toPointSequence())
        });
        addCase(20,
                "POLYGON((10 10 0 7,20 10 0 7,20 20 0 7,20 10 0 7,10 10 0 7),(5 5 0 7,5 6 0 7,6 6 0 7,6 5 0 7,5 5 0 7))",

                polygon3DM);

        addCase(21,
                "MULTIPOLYGON(((10 10,20 10,20 20,20 10,10 10),(5 5,5 6,6 6,6 5,5 5)),((10 10,20 10,20 20,20 10,10 10),(5 5,5 6,6 6,6 5,5 5)))",

                new MultiPolygon(new Polygon[]{polygon2D, polygon2D}));

        MultiPolygon multiPolygon3D = new MultiPolygon(new Polygon[]{polygon3D, polygon3D});
        addCase(22,
                "MULTIPOLYGON(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                multiPolygon3D);

        MultiPolygon multiPolygon2DM = new MultiPolygon(new Polygon[]{polygon2DM, polygon2DM});
        addCase(23,
                "MULTIPOLYGONM(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                multiPolygon2DM);

        addCase(24,
                "MULTIPOLYGON(((10 10 0 7,20 10 0 7,20 20 0 7,20 10 0 7,10 10 0 7),(5 5 0 7,5 6 0 7,6 6 0 7,6 5 0 7,5 5 0 7)),((10 10 0 7,20 10 0 7,20 20 0 7,20 10 0 7,10 10 0 7),(5 5 0 7,5 6 0 7,6 6 0 7,6 5 0 7,5 5 0 7)))",

                new MultiPolygon(new Polygon[]{polygon3DM, polygon3DM}));


        addCase(25,
                "MULTILINESTRING((10 10,20 10,20 20,20 10,10 10),(5 5,5 6,6 6,6 5,5 5))",
                "01050000000200000001020000000500000000000000000024400000000000002440000000000000344000000000000024400000000000003440000000000000344000000000000034400000000000002440000000000000244000000000000024400102000000050000000000000000001440000000000000144000000000000014400000000000001840000000000000184000000000000018400000000000001840000000000000144000000000000014400000000000001440",
                new MultiLineString(new LineString[]{
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d2D, CrsId.UNDEFINED)
                                .add(10, 10).add(20, 10).add(20, 20).add(20, 10).add(10, 10).toPointSequence()),
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d2D, CrsId.UNDEFINED)
                                .add(5, 5).add(5, 6).add(6, 6).add(6, 5).add(5, 5).toPointSequence())

                }));

        addCase(26,
                "MULTILINESTRING((10 10 5,20 10 5,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))",

                new MultiLineString(new LineString[]{
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                                .add(10, 10, 5).add(20, 10, 5).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0).toPointSequence()),
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                                .add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
                }));

        addCase(27,
                "MULTILINESTRINGM((10 10 7,20 10 7,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))",

                new MultiLineString(new LineString[]{
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d2DM, CrsId.UNDEFINED)
                                .add(10, 10, 7).add(20, 10, 7).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0).toPointSequence()),
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d2DM, CrsId.UNDEFINED)
                                .add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
                }));

        addCase(28,
                "MULTILINESTRING((10 10 0 7,20 10 0 7,20 20 0 7,20 10 0 7,10 10 0 7),(5 5 0 7,5 6 0 7,6 6 0 7,6 5 0 7,5 5 0 7))",

                new MultiLineString(new LineString[]{
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3DM, CrsId.UNDEFINED)
                                .add(10, 10, 0, 7).add(20, 10, 0, 7).add(20, 20, 0, 7).add(20, 10, 0, 7).add(10, 10, 0, 7).toPointSequence()),
                        new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3DM, CrsId.UNDEFINED)
                                .add(5, 5, 0, 7).add(5, 6, 0, 7).add(6, 6, 0, 7).add(6, 5, 0, 7).add(5, 5, 0, 7).toPointSequence())
                }));

        addCase(29,
                "GEOMETRYCOLLECTION(POINT(10 10),POINT(20 20))",
                "010700000002000000010100000000000000000024400000000000002440010100000000000000000034400000000000003440",
                new GeometryCollection(new Point[]{
                        Points.create2D(10, 10), Points.create2D(20, 20)
                }));

        addCase(30,
                "GEOMETRYCOLLECTION(POINT(10 10 20),POINT(20 20 20))",
                "01070000800200000001010000800000000000002440000000000000244000000000000034400101000080000000000000344000000000000034400000000000003440",
                new GeometryCollection(new Point[]{
                        Points.create3D(10, 10, 20), Points.create3D(20, 20, 20)
                }));

        addCase(31,
                "GEOMETRYCOLLECTIONM(POINT(10 10 20),POINT(20 20 20))",
                "01070000400200000001010000400000000000002440000000000000244000000000000034400101000040000000000000344000000000000034400000000000003440",
                new GeometryCollection(new Point[]{
                        Points.create2DM(10, 10, 20), Points.create2DM(20, 20, 20)
                }));

        addCase(32,
                "GEOMETRYCOLLECTION(POINT(10 10 20 7),POINT(20 20 20 7))",
                "01070000C00200000001010000C00000000000002440000000000000244000000000000034400000000000001C4001010000C00000000000003440000000000000344000000000000034400000000000001C40",
                new GeometryCollection(new Point[]{
                        Points.create3DM(10, 10, 20, 7), Points.create3DM(20, 20, 20, 7)
                }));

        addCase(33,
                "GEOMETRYCOLLECTION(LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34),LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34))",
                "010700008002000000010200008004000000000000000000244000000000000024400000000000003440000000000000344000000000000034400000000000003440000000000000494000000000000049400000000000004940000000000000414000000000000041400000000000004140010200008004000000000000000000244000000000000024400000000000003440000000000000344000000000000034400000000000003440000000000000494000000000000049400000000000004940000000000000414000000000000041400000000000004140",
                new GeometryCollection(new LineString[]{line3D, line3D}));

        addCase(34,
                "GEOMETRYCOLLECTION(POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                new GeometryCollection(new Geometry[]{polygon3D, polygon3D}));

        MultiPoint mp = new MultiPoint(new Point[]{Points.create3D(10, 10, 10), Points.create3D(20, 20, 20)});
        GeometryCollection gcmp = new GeometryCollection(new Geometry[]{mp, mp});
        addCase(35,
                "GEOMETRYCOLLECTION(MULTIPOINT(10 10 10, 20 20 20),MULTIPOINT(10 10 10, 20 20 20))",
                "0107000080020000000104000080020000000101000080000000000000244000000000000024400000000000002440010100008000000000000034400000000000003440000000000000344001040000800200000001010000800000000000002440000000000000244000000000000024400101000080000000000000344000000000000034400000000000003440",
                gcmp, false);

        addCase(36,
                "GEOMETRYCOLLECTION(MULTIPOINT((10 10 10),(20 20 20)),MULTIPOINT((10 10 10),(20 20 20)))",
                "0107000080020000000104000080020000000101000080000000000000244000000000000024400000000000002440010100008000000000000034400000000000003440000000000000344001040000800200000001010000800000000000002440000000000000244000000000000024400101000080000000000000344000000000000034400000000000003440",
                gcmp);

        addCase(37,
                "GEOMETRYCOLLECTION(MULTILINESTRING((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                new GeometryCollection(new Geometry[]{
                        new MultiLineString(new LineString[]{
                                new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                                        .add(10, 10, 0).add(20, 10, 0).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0).toPointSequence()),
                                new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED)
                                        .add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
                        })
                }));

        addCase(38,
                "GEOMETRYCOLLECTION(MULTIPOLYGON(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))),MULTIPOLYGON(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))))",

                new GeometryCollection(new Geometry[]{multiPolygon3D, multiPolygon3D}));

        addCase(39,
                "GEOMETRYCOLLECTION(POINT(10 10 20),LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34),POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                new GeometryCollection(new Geometry[]{
                        Points.create3D(10, 10, 20), line3D, polygon3D
                }));

        MultiLineString mls = new MultiLineString(new LineString[]{
                new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED).add(10, 10, 0).add(20, 10, 0).add(20, 20, 0).add(20, 10, 0).add(10, 10, 0).toPointSequence()),
                new LineString(PointSequenceBuilders.variableSized(DimensionalFlag.d3D, CrsId.UNDEFINED).add(5, 5, 0).add(5, 6, 0).add(6, 6, 0).add(6, 5, 0).add(5, 5, 0).toPointSequence())
        });

        addCase(40,
                "GEOMETRYCOLLECTION(POINT(10 10 20),MULTIPOINT(10 10 10,20 20 20),LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34),POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),MULTIPOLYGON(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))),MULTILINESTRING((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                new GeometryCollection(new Geometry[]{
                        Points.create3D(10, 10, 20), mp, line3D, polygon3D, multiPolygon3D, mls
                }), false);

        addCase(41,
                "GEOMETRYCOLLECTION(POINT(10 10 20),MULTIPOINT((10 10 10),(20 20 20)),LINESTRING(10 10 20,20 20 20,50 50 50,34 34 34),POLYGON((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),MULTIPOLYGON(((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)),((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0))),MULTILINESTRING((10 10 0,20 10 0,20 20 0,20 10 0,10 10 0),(5 5 0,5 6 0,6 6 0,6 5 0,5 5 0)))",

                new GeometryCollection(new Geometry[]{
                        Points.create3D(10, 10, 20), mp, line3D, polygon3D, multiPolygon3D, mls
                }));

        addCase(42, "GEOMETRYCOLLECTION EMPTY", "010700000000000000", new GeometryCollection(null));

        addCase(43, "POINT EMPTY", "010700000000000000", Point.createEmpty());
        addCase(44, "LINESTRING EMPTY", "010700000000000000", LineString.createEmpty());
        addCase(45, "POLYGON EMPTY", "010700000000000000", LineString.createEmpty());
        addCase(45, "MULTIPOINT EMPTY", "010700000000000000", LineString.createEmpty());


        LineString ls = new LineString(PointSequenceBuilders.fixedSized(2, DimensionalFlag.d2D, CrsId.UNDEFINED).add(4, 2).add(5, 3).toPointSequence());
        addCase(46, "GEOMETRYCOLLECTION(POINT(4 0),POINT EMPTY,LINESTRING(4 2,5 3))",
                "0107000000030000000101000000000000000000104000000000000000000107000000000000000102000000020000000000000000001040000000000000004000000000000014400000000000000840",
                new GeometryCollection(new Geometry[]{
                        Points.create2D(4, 0), Points.createEmpty(), ls
                }));

    }
}